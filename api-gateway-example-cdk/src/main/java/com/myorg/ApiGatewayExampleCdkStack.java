package com.myorg;

import software.amazon.awscdk.CfnOutput;
import software.amazon.awscdk.Duration;
import software.amazon.awscdk.services.apigateway.*;
import software.amazon.awscdk.services.cognito.*;
import software.amazon.awscdk.services.dynamodb.Attribute;
import software.amazon.awscdk.services.dynamodb.AttributeType;
import software.amazon.awscdk.services.dynamodb.Table;
import software.amazon.awscdk.services.lambda.Runtime;
import software.amazon.awscdk.services.lambda.Code;
import software.amazon.awscdk.services.lambda.Function;
import software.constructs.Construct;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;

import java.util.HashMap;
import java.util.List;

public class ApiGatewayExampleCdkStack extends Stack {
    public ApiGatewayExampleCdkStack(final Construct scope, final String id) {
        this(scope, id, null);
    }

    public ApiGatewayExampleCdkStack(final Construct scope, final String id, final StackProps props) {
        super(scope, id, props);

        //DynamoDB
        Table tweetsTable = Table.Builder.create(this, "Tweets")
                .partitionKey(Attribute.builder().name("user").type(AttributeType.STRING).build())
                .sortKey(Attribute.builder().name("time").type(AttributeType.STRING).build())
                .build();

        //The name of the table is dynamically generated by CDK and needs to be passed to the lambda functions
        HashMap<String, String> env = new HashMap<String, String>();
        env.put("TWEETS_TABLE", tweetsTable.getTableName());


        //Handler for tweeting/creating tweets
        Function tweetHandler = Function.Builder.create(this, "tweetHandler").runtime(Runtime.JAVA_11).functionName("tweetHandler")
                .timeout(Duration.seconds(60))
                .memorySize(512)
                .environment(env)
                .code(Code.fromAsset("../lambda/target/lambda-jar-with-dependencies.jar"))
                .handler("lambda.CreateTweet")
                .build();

        //Handler for listing tweets
        Function getTweetHandler = Function.Builder.create(this, "getTweetHandler").runtime(Runtime.JAVA_11).functionName("getTweetHandler")
                .timeout(Duration.seconds(60))
                .memorySize(512)
                .environment(env)
                .code(Code.fromAsset("../lambda/target/lambda-jar-with-dependencies.jar"))
                .handler("lambda.ListTweets")
                .build();

        LambdaIntegration tweetIntegration = LambdaIntegration.Builder.create(tweetHandler).build();
        LambdaIntegration getTweetIntegration = LambdaIntegration.Builder.create(getTweetHandler).build();

        //Granting handlers (lambdas) permissions to DynamoDB table
        tweetsTable.grantReadWriteData(tweetHandler);
        tweetsTable.grantFullAccess(getTweetHandler);

        //API Gateway rest api
        RestApi twitterApi = RestApi.Builder.create(this, "twitterApi")
                .restApiName("twitterApi")
                .build();

        //Cognito user pool
        UserPool userPool = new UserPool(this, "twitterUserPool", UserPoolProps.builder()
                .passwordPolicy(PasswordPolicy.builder()
                        .minLength(6)
                        .requireUppercase(false)
                        .requireSymbols(false)
                        .build()
                ).build());

        userPool.addClient("twitterExampleClient", UserPoolClientOptions.builder()
                .authFlows(AuthFlow.builder()
                        .userPassword(true)
                        .build())
                .build());

        //Cognito authorizer to let users authenticated to "twitterUserPool" access the API
        CognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, "twitterAuthorizer")
                .cognitoUserPools(List.of(userPool))
                .build();

        //Mapping handlers to paths and setting the authorizer
        Resource tweet = twitterApi.getRoot().addResource("tweet");
        tweet.addMethod("POST", tweetIntegration, MethodOptions.builder()
                .authorizer(auth)
                .authorizationType(AuthorizationType.COGNITO)
                .build());

        Resource tweets = twitterApi.getRoot().addResource("tweets");
        tweets.addMethod("GET", getTweetIntegration, MethodOptions.builder()
                .authorizer(auth)
                .authorizationType(AuthorizationType.COGNITO)
                .build());

        Resource myTweets = twitterApi.getRoot().addResource("my_tweets");
        myTweets.addMethod("GET", getTweetIntegration, MethodOptions.builder()
                .authorizer(auth)
                .authorizationType(AuthorizationType.COGNITO)
                .build());


        //(Optional) outputs
        CfnOutput.Builder.create(this, "Tweets DynamoDB table")
                .description("")
                .value(tweetsTable.getTableName());

        CfnOutput.Builder.create(this, "Create tweet lambda")
                .description("")
                .value(tweetHandler.getFunctionArn());

        CfnOutput.Builder.create(this, "API")
                .description("")
                .value(twitterApi.getUrl());

        CfnOutput.Builder.create(this, "handler role")
                .description("handler role")
                .value(tweetHandler.getRole().getRoleArn());
    }
}
